pragma solidity ^0.4.17; 

contract test {
    address manager;
    string FLAG = "hackability{4rr4y l3n67h und3rfl0w 15 fun}";
    uint256 []x = [32, 64];

    // manager will be contract deployer
    constructor () public {
        manager = msg.sender;
    } 
    
    // get manager
    function getManager() public view returns (address) {
        return manager;
    }
    
    // set array
    function setX(uint256 _index, uint256 _v) public {
        x[_index] = _v;
    }
    
    // get array
    function getX(uint256 _index) view public returns(uint256) {
        return x[_index];
    }
    
    // [*] vulnerable
    function popX() public {
        x.length--;
    } 
    
    // get flag like CTF style :P
    function getFLAG() public restricted view returns(string){
        return FLAG;
    }
    
    // manger only modifier
    modifier restricted() {
        require(msg.sender == manager);
        _;
    }

}